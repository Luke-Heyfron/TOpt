#ifndef LCL_MATRIX_HEADER
#define LCL_MATRIX_HEADER

/// A class that represents the mathematical objects commonly known as matrices.
/**
    The key ideas behind this system of classes are:
    1) Operational compatibility between different types of physical representations of matrices.
    I.e. a dense matrix on the stack can multiply with a sparse matrix on the heap etc.

    2) Template system to allow matrices on ANY field be easily defined without lots of trivial code repetition.

    Notes:
        - The template parameter T SHOULD REALLY be a class derived from LCL_Field. The ensures operators +,-,*,/ are well defined.
        - Each derived class of LCL_Matrix should implement arithmetic operator overrides whose return type should be it's own class.
        - These arithmetic overrides should use the static arithmetic operator implementations found in LCL_Matrix.
*/

#include "LCL/Core/LCL_Array.h"
#include <iostream>
using namespace std;

#include <utility>

/// First element is the number of rows, second is the number of columns.
typedef int LCL_Mat_Size;

//typedef pair<int, int> LCL_Mat_Dims;
class LCL_Mat_Dims : public pair<LCL_Mat_Size,LCL_Mat_Size> {
    bool operator==(const LCL_Mat_Dims& B) {return (r()==B.r())&&(c()==B.c());}
    LCL_Mat_Size r() const {return get<0>(*this);}
    LCL_Mat_Size c() const {return get<1>(*this);}
};

template<class T>
class LCL_Matrix {
    protected:
        LCL_Mat_Dims _dims;
    public:
        /*LCL_Matrix();
        LCL_Matrix(const LCL_Matrix& in);
        LCL_Matrix(int in_r, int in_c);*/
        // virtual void alloc() {}
        // virtual void dealloc() {}
        /// A child class that needs to (re)allocate memory on the fly should override this.
        virtual void resize(LCL_Mat_Size in_r, LCL_Mat_Size in_c) {r() = in_r; c() = in_c;}

        // Accessors
        virtual const T& operator()(int i, int j) const = 0;
        virtual T& operator()(int i, int j) = 0;

        // Assignment
        static void assignment(LCL_Matrix<T>& dest, const LCL_Matrix<T>& src); /// dest = src;
        virtual LCL_Matrix& operator=(const LCL_Matrix& in);

        // Dimensions
        LCL_Mat_Size r() const;
        LCL_Mat_Size c() const;
        LCL_Mat_Size& r();
        LCL_Mat_Size& c();
        LCL_Mat_Dims dims() const;
        LCL_Mat_Dims& dims();

        // Element setters
        void reset();

        // Input/Output
            // Save
            // Load

        // Arithmetic operators
        static void addition(LCL_Matrix<T>& out, const LCL_Matrix<T>& A, const LCL_Matrix<T>&B); /// out = A + B;
        static void multiplication(LCL_Matrix<T>& out, const LCL_Matrix<T>& A, const LCL_Matrix<T>&B); /// out = A * B;
        static void scalar_multiplication(LCL_Matrix<T>& out, const LCL_Matrix<T>& A, const T& b); /// out = A * b;
        static void scalar_division(LCL_Matrix<T>& out, const LCL_Matrix<T>& A, const T& b); /// out = A / b;
        static void additive_inverse(LCL_Matrix<T>& out, const LCL_Matrix<T>& A); /// out = -A;
        static void multiplicative_inverse(LCL_Matrix<T>& out, const LCL_Matrix<T>& A); /// out = A^{-1};

        // Templates for child class operators
        /*
        virtual LCL_Matrix operator+(const LCL_Matrix& b) const;
        virtual LCL_Matrix operator-() const;
        virtual LCL_Matrix operator-(const LCL_Matrix& b) const;
        virtual LCL_Matrix operator*(const T& b) const;
        virtual LCL_Matrix operator/(const T& b) const;
        virtual LCL_Matrix operator*(const LCL_Matrix& b) const;
        */

        // Arithmetic assignment operators
        // TODO Implement these
        /*virtual LCL_Matrix& operator+=(const LCL_Matrix& b) const;
        virtual LCL_Matrix& operator-=(const LCL_Matrix& b) const;
        virtual LCL_Matrix& operator*=(const LCL_Matrix& b) const;
        virtual LCL_Matrix& operator*=(const T& b) const;
        virtual LCL_Matrix& operator/=(const T& b) const;*/

        // Matrix operations
            // Transpose

        // Composition operators
            // Left-right concat
            // Top-bottom concat

        // Row/column operators

        // Assignment operators

        // Static functions

        // stdout
        // TODO Implement this:
        /*template <class Y, int J, int K>
        friend ostream& operator<<(ostream&, const LCL_Matrix<Y,J,K>& in);*/
        void print() const;

        // Badval
        static T LCL_Matrix_Bad_Val;
};

#include "LCL_Matrix_imp1.h"

#endif // LCL_MATRIX_HEADER
